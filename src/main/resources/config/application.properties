# All values defined here are globally available across all controllers.

####################################################
# EMBEDDED SERVER CONFIGURATION (ServerProperties) #
####################################################
#server.port			= 80

###################################################################
# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties) #
###################################################################

spring.datasource.url=jdbc:mysql://localhost/userdb
spring.datasource.username=root
spring.datasource.password=supersecretpassword
spring.datasource.driverClassName=com.mysql.jdbc.Driver

###########
# JSF 2.2 #
###########

# Ensures no XML comments in JSF templates reach the client.
server.context-parameters.javax.faces.FACELETS_SKIP_COMMENTS=true

# Determines where JSF state is saved.
# Use server side to prevent CSRF and phishing attacks at the cost of additional memory requirements. (Store state in the session)
# --- If session is cached on its own server, serialization/deserialization of the session can be used in the event of a failover to not lose state.
# Use client side to lessen load on server at the expense of additional network traffic. State, without anything special, wont be lost in the event of a failover.
server.context-parameters.javax.faces.STATE_SAVING_METHOD=server

# For DEVELOPMENT environments. A large buffer is used to ensure the response is fully rendered, even in the event of an error.
server.context-parameters.javax.faces.FACELETS_BUFFER_SIZE=1048576

# By default, JSF uses a colon to separate IDs in generated HTML. This collides with CSS and JS selectors.
#		
# Here, we override that default with a hyphen. ### This has a drawback! ###
#	
# As a result, we cannot have a JSF component ID like: <h:someComponent id="foo-bar" />
# This COLLIDES with the newly defined separator, and will BREAK UIComponent#findComponent() lookup.
server.context-parameters.javax.faces.SEPARATOR_CHAR=-


#################
# MOJARRA 2.2.6 #
#################

# Default: false 
# As of 2.0.0, children of UIInput and UIOutput components will not be rendered by the default renderer implementations.
# Set this option to true if this behavior is required, but note that doing so may cause issues when using Ajax.
#		
# Essentially, wrapping raw text with outputText causes a MalformedXML error in AJAX.
#		
# Example:
# <h:outputText id="target">#{count.count}</h:outputText><br/>
#
# Causes the outputText component to emit:
# 10<span id="target></span>
#		
# Which is invalid XML.
#
# ### What SHOULD be done! This evades the AJAX breaking issue! ###
# <h:outputText id="target" value="#{count.count}"/><br/>
#		
# If this is done consistently, this param can be set to false.
server.context-parameters.com.sun.faces.allowTextChildren=true

# Default Behavior: true
# If JSF state is saved on the client side:
# Renders the value of javax.faces.ViewState into a hidden fields name AND id attributes.		
#
# Current:
# Setting this to false causes ID attribute to not be rendered on the hidden field.
# MAY BREAK integration with AJAX frameworks that get the state field via ID. 
server.context-parameters.com.sun.faces.enableViewStateIdRendering=false

# Whether or not to check at runtime for the existence of a resource library. If not found, error printed out.
server.context-parameters.com.sun.faces.enableMissingResourceLibraryDetection=true

###############
# PRETTYFACES #
###############

# Set the base package to scan for annotations.
server.context-parameters.com.ocpsoft.pretty.BASE_PACKAGES=foundation
 
# Set whether or not to attempt to scan WEB-INF/lib for classes.
#server.context-parameters.com.ocpsoft.pretty.SCAN_LIB_DIRECTORY=true

##########################
# EMAIL (MailProperties) #
##########################
# Mail server host
spring.mail.host=mail.dig-inc.net
# Mail server port
spring.mail.port=25
spring.mail.username=digimail
spring.mail.password=65mail50
# Encoding to use for MimeMessages
spring.mail.default-encoding=UTF-8
# Properties to set on the JavaMail session
# spring.mail.properties.*=